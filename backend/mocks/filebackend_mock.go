// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/InteractiveLecture/media-service/backend (interfaces: FileBackend)

package filebackendmocks

import (
	backend "github.com/InteractiveLecture/media-service/backend"
	gomock "github.com/golang/mock/gomock"
)

// Mock of FileBackend interface
type MockFileBackend struct {
	ctrl     *gomock.Controller
	recorder *_MockFileBackendRecorder
}

// Recorder for MockFileBackend (not exported)
type _MockFileBackendRecorder struct {
	mock *MockFileBackend
}

func NewMockFileBackend(ctrl *gomock.Controller) *MockFileBackend {
	mock := &MockFileBackend{ctrl: ctrl}
	mock.recorder = &_MockFileBackendRecorder{mock}
	return mock
}

func (_m *MockFileBackend) EXPECT() *_MockFileBackendRecorder {
	return _m.recorder
}

func (_m *MockFileBackend) LoadById(_param0 string) (backend.ReadSeekCloser, *backend.FileMeta, error) {
	ret := _m.ctrl.Call(_m, "LoadById", _param0)
	ret0, _ := ret[0].(backend.ReadSeekCloser)
	ret1, _ := ret[1].(*backend.FileMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockFileBackendRecorder) LoadById(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadById", arg0)
}

func (_m *MockFileBackend) LoadByName(_param0 string) (backend.ReadSeekCloser, *backend.FileMeta, error) {
	ret := _m.ctrl.Call(_m, "LoadByName", _param0)
	ret0, _ := ret[0].(backend.ReadSeekCloser)
	ret1, _ := ret[1].(*backend.FileMeta)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockFileBackendRecorder) LoadByName(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "LoadByName", arg0)
}

func (_m *MockFileBackend) Save(_param0 string, _param1 string, _param2 map[string]interface{}, _param3 backend.ReadSeekCloser) (string, error) {
	ret := _m.ctrl.Call(_m, "Save", _param0, _param1, _param2, _param3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockFileBackendRecorder) Save(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Save", arg0, arg1, arg2, arg3)
}
