// Automatically generated by MockGen. DO NOT EDIT!
// Source: github.com/InteractiveLecture/media-service/backend (interfaces: ReadSeekCloser)

package filebackendmocks

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of ReadSeekCloser interface
type MockReadSeekCloser struct {
	ctrl     *gomock.Controller
	recorder *_MockReadSeekCloserRecorder
}

// Recorder for MockReadSeekCloser (not exported)
type _MockReadSeekCloserRecorder struct {
	mock *MockReadSeekCloser
}

func NewMockReadSeekCloser(ctrl *gomock.Controller) *MockReadSeekCloser {
	mock := &MockReadSeekCloser{ctrl: ctrl}
	mock.recorder = &_MockReadSeekCloserRecorder{mock}
	return mock
}

func (_m *MockReadSeekCloser) EXPECT() *_MockReadSeekCloserRecorder {
	return _m.recorder
}

func (_m *MockReadSeekCloser) Close() error {
	ret := _m.ctrl.Call(_m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockReadSeekCloserRecorder) Close() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Close")
}

func (_m *MockReadSeekCloser) Read(_param0 []byte) (int, error) {
	ret := _m.ctrl.Call(_m, "Read", _param0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockReadSeekCloserRecorder) Read(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Read", arg0)
}

func (_m *MockReadSeekCloser) Seek(_param0 int64, _param1 int) (int64, error) {
	ret := _m.ctrl.Call(_m, "Seek", _param0, _param1)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockReadSeekCloserRecorder) Seek(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Seek", arg0, arg1)
}
